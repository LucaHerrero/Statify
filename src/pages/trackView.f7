<template>
    <div class="page">
        <div class="navbar">
            <div class="navbar-bg"></div>
            <div class="navbar-inner sliding">
                <div class="left">
                    <a href="#" class="link back">
                        <i class="icon icon-back"></i>
                        <span class="if-not-md">Back</span>
                    </a>
                </div>
                <div class="title">${track.name}</div>
                <div class="right">
                    <a href="#" class="link icon-only" @click="${showAvaibleMarkets}">
                        <i class="icon material-icons">language</i>
                    </a>
                    <a href="#" class="link icon-only" @click="${share}">
                        <i class="icon material-icons">share</i>
                    </a>
                </div>
            </div>
        </div>
        <div class="page-content">
            ${album.images.length > 1 ? $h`
            <div class="previewImageBlock">
                <img src="${album.images[1].url}" width="200px" class="imageBlur" />
                <img src="${album.images[1].url}" width="200px" class="imageNoBlur" />
            </div>
            ` : $h`
            `}
            <div class="contentBlock">
                ${viewData.showProgressbar && $h`
                <span class="progressbar" id="trackprogressbar"></span>`}


                <div class="block block-strong no-margin-top optionsBlock">
                    ${track.preview_url && $h`
                    <button
                        class=" button button-large button-fill button-round button-preloader optionsButtons ${previewLoading ? 'button-loading' : ''}"
                        @click=${playTrack}>
                        <span class="preloader"></span>
                        <span></span>
                        <span class="material-icons-round optionButtonIcon">
                            ${playButton}
                        </span>
                    </button>
                    `}
                    <div style="margin-left: auto; display: flex;">
                        <a class=" button button-large button-round optionsButtons" @click="${addToPlaylist}">
                            <span class="material-icons-round optionButtonIcon">
                                playlist_add
                            </span>
                        </a>
                        <button
                            class=" button button-large button-round optionsButtons button-preloader ${viewData.trackIsSavedLoading ? 'button-loading' : ''}"
                            @click=${addRemoveTrack}>
                            <span class="preloader"></span>
                            <span></span>
                            <span class="material-icons-round optionButtonIcon">
                                ${viewData.trackIsSaved ? 'favorite' : 'favorite_border'}
                            </span>
                        </button>

                    </div>


                </div>

                <div class="block-title">Album</div>
                <div class="list media-list">
                    <ul>
                        <li>
                            <a href="/album/${album.id}/" class="item-link item-content">
                                <div class="item-media">
                                    ${album.images.length > 1 ? $h`
                                    <img src="${album.images[1].url}" width="70" />
                                    ` : $h`
                                    <img src="./assets/icons/library_music_black_48dp.svg" width="70" />
                                    `}
                                </div>
                                <div class="item-inner">
                                    <div class="item-title-row">
                                        <div class="item-title">${album.name}</div>
                                    </div>
                                    <div class="item-subtitle">
                                        ${album.artists.map((item) => $h`
                                        ${item.name} `)}
                                    </div>
                                    <div class="item-text">${album.release_date.substring(0, 4)} Â· ${album.total_tracks}
                                        Tracks</div>
                                </div>
                            </a>
                        </li>


                    </ul>
                </div>

                ${viewData.songAnalytics != undefined && $h`
                <div class="block-title">Song analytics</div>
                <div class="block block-strong no-margin-bottom">
                    <div class="row">
                        <div class="col text-align-center">
                            <div class="gauge gauge-init" data-type="semicircle"
                                data-value="${viewData.songAnalytics.danceability}"
                                data-value-text="${(viewData.songAnalytics.danceability * 100).toFixed(0)}%"
                                data-value-text-color="#f44336" data-border-color="#f44336"
                                data-label-text="Danceability score"></div>
                        </div>
                        <div class="col text-align-center">
                            <div class="gauge gauge-init" data-type="semicircle"
                                data-value="${viewData.songAnalytics.valence}"
                                data-value-text="${(viewData.songAnalytics.valence * 100).toFixed(0)}%"
                                data-value-text-color="#e91e63" data-border-color="#e91e63"
                                data-label-text="Happy Song"></div>
                        </div>
                    </div>
                </div>
                <div class="list media-list no-margin-top no-hairlines">
                    <ul>
                        <li>
                            <a href="/artist/" class="item-link item-content">
                                <div class="item-media">
                                    <i class="icon material-icons-round">bar_chart</i>
                                </div>
                                <div class="item-inner">
                                    <div class="item-title-row">
                                        <div class="item-title">More analytics</div>
                                    </div>
                                </div>
                            </a>
                        </li>
                    </ul>
                </div>
                `}



                ${viewData.songAnalytics != undefined && $h`
                <div class="block-title">Audio analytics</div>
                <div class="block block-strong no-margin-bottom">
                    <div class="row">
                        ${viewData.songAnalytics.key >= 0 && $h`
                        <div class="col text-align-center">
                            <div class="card card-outline">
                                <div class="card-content">
                                    <h1 class="margin-bottom-half" style="color: var(--f7-navbar-link-color);">${keyMap[viewData.songAnalytics.key]}</h1>
                                    <p class="no-margin-top">Key</p>
                                </div>
                            </div>
                        </div>
                        `}
                        <div class="col text-align-center">
                            <div class="card card-outline">
                                <div class="card-content">
                                    <h1 class="margin-bottom-half" style="color: var(--f7-navbar-link-color);">${viewData.songAnalytics.tempo}</h1>
                                    <p class="no-margin-top">BPM</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="list media-list no-margin-top no-hairlines">
                    <ul>
                        <li>
                            <a href="/artist/" class="item-link item-content">
                                <div class="item-media">
                                    <i class="icon material-icons-round">bar_chart</i>
                                </div>
                                <div class="item-inner">
                                    <div class="item-title-row">
                                        <div class="item-title">More analytics</div>
                                    </div>
                                </div>
                            </a>
                        </li>
                    </ul>
                </div>
                `}






                ${track.artists != undefined ? $h`
                <div class="block-title">Artists</div>
                <div class="list media-list margin-bottom-half">
                    <ul>
                        ${track.artists.map((item) => $h`
                        <li>
                            <a href="/artist/${item.id}/" class="item-link item-content">
                                <div class="item-media">
                                    <i class="icon material-icons-round">face</i>
                                </div>
                                <div class="item-inner">
                                    <div class="item-title-row">
                                        <div class="item-title">${item.name}</div>
                                    </div>
                                </div>
                            </a>
                        </li>
                        `)}
                    </ul>
                </div>

                ` : $h ``}


                <div class="block-title">Infos</div>
                <div class="list">
                    <ul>
                        <li>
                            <div class="item-content">
                                <div class="item-media"><i class="material-icons-round">
                                        av_timer
                                    </i></div>
                                <div class="item-inner">
                                    <div class="item-title">Duration time</div>
                                    <div class="item-after">${viewData.duration}</div>
                                </div>
                            </div>
                        </li>
                        <li>
                            <a href="${track.external_urls.spotify}" class="item-link item-content external">
                                <div class="item-media">
                                    <i class="icon material-icons-round">launch
                                    </i>
                                </div>
                                <div class="item-inner">
                                    <div class="item-title-row">
                                        <div class="item-title">Open in Spotify</div>
                                    </div>
                                </div>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</template>
<style scoped>
    .optionsBlock {
        display: flex;
    }

    .spotify-icon {
        height: 24px;
        width: 24px;
        background-image: url(./assets/icons/spotify.svg);
        margin-right: 5px;
        color: var(--f7-text-color)
    }

    .playButton {
        width: fit-content !important;
    }

    .optionsButtons {
        width: fit-content !important;
    }

    .optionButtonIcon {
        margin-left: 0 !important;
        margin-right: 4px;
    }

    .marketItem {
        width: min-content;
    }

    .marketRow>div {
        width: fit-content !important;
        margin: 5px !important;
    }

    .sheet-modal-inner {
        overflow-y: scroll !important;
    }

    .previewImageBlock {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 0;
    }

    .previewImageBlock>img {
        display: block;
        object-fit: cover;
        object-position: center;
    }

    .contentBlock {
        background: var(--f7-page-bg-color);
        position: relative;
        z-index: 1;
        height: 1000px;
        margin-top: 0;
    }

    .imageBlur {
        -webkit-filter: blur(20px);
        -moz-filter: blur(20px);
        -o-filter: blur(20px);
        -ms-filter: blur(20px);
        filter: blur(20px);
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        padding: 30px;
    }

    .imageNoBlur {
        padding: 30px;
        position: inherit;
        margin-left: auto;
        margin-right: auto;
    }

    .swiper-container>div>div.swiper-slide {
        width: 150px;
    }

    .swiper-container>div>div.swiper-slide:first-child {
        margin-left: 15px;
    }

    .swiper-container>div>div.swiper-slide:last-child {
        margin-right: 15px;
    }

    .swiper-container>div>div.swiper-slide>a>img {
        width: 150px;
        height: 150px;
        border-radius: 5%;
        object-fit: cover;

    }

    .swiper-container>div>div.swiper-slide>a {
        width: 150px;
        text-overflow: ellipsis;
        overflow-y: hidden;
    }

    .swiper-container>div>div.swiper-slide>a>div.title {
        color: var(--f7-block-title-large-text-color);
        font-weight: 500;
    }

    .swiper-container>div>div.swiper-slide>a>div.artist {
        color: var(--f7-block-title-large-text-color);
        opacity: 0.5;
    }
</style>
<script>
    import {
        countryCodeEmoji
    } from 'country-code-emoji';
    const keyMap = {
        0: 'C', 1: 'C#', 2: 'D', 3: 'D#', 4: 'E', 5: 'F', 6: 'F#', 7: 'G', 8: 'G#', 9: 'A', 10: 'A#', 11: 'B'
    }
    export default (props, {
        $,
        $f7,
        $update,
        $on,
        $store,
        $f7router
    }) => {
        const spotify = $store.getters.spotifyApi.value;
        let previewLoading = false;
        var regExRegion =
            /^(?:(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))$|^((?:[a-z]{2,3}(?:(?:-[a-z]{3}){1,3})?)|[a-z]{4}|[a-z]{5,8})(?:-([a-z]{4}))?(?:-([a-z]{2}|\d{3}))?((?:-(?:[\da-z]{5,8}|\d[\da-z]{3}))*)?((?:-[\da-wy-z](?:-[\da-z]{2,8})+)*)?(-x(?:-[\da-z]{1,8})+)?$|^(x(?:-[\da-z]{1,8})+)$/i;
        let region = regExRegion.exec(navigator.language)[5];
        console.log(region)
        const track = props.track;
        const album = track.album;
        let player;
        let playButton = "play_arrow";
        let viewData = {
            trackIsSavedLoading: true
        };
        console.log(track);

        const share = () => {
            const shareData = {
                title: `Statify - ${track.name}`,
                text: 'Look at this track i found!',
                url: window.location.origin + $f7router.url
            }

            try {
                navigator.share(shareData)
            } catch (err) {
                console.log('share error', err);
            }
        }

        $on('pageInit', (e, page) => {
            const msToTime = (duration) => {
                var milliseconds = parseInt((duration % 1000) / 100),
                    seconds = Math.floor((duration / 1000) % 60),
                    minutes = Math.floor((duration / (1000 * 60))),

                    minutes = (minutes < 10) ? "0" + minutes : minutes;
                seconds = (seconds < 10) ? "0" + seconds : seconds;

                return minutes + ":" + seconds;
            }

            viewData.duration = msToTime(track.duration_ms);
            $update();
        });

        //Load if Tracks is in User Library
        spotify
            .containsMySavedTracks([track.id]) // note that we don't pass a user id
            .then(
                function (data) {
                    viewData.trackIsSavedLoading = false;
                    viewData.trackIsSaved = data[0];
                    $update();
                }

            );


        spotify
            .getAudioFeaturesForTrack(track.id) // note that we don't pass a user id
            .then(
                function (data) {
                    viewData.songAnalytics = data;
                    console.log(data)
                    $update();
                }

            );

        const addToPlaylist = () => {
            $f7router.navigate('/add/playlist/', {
                props: {
                    items: [track]
                }
            })
        }

        const addRemoveTrack = () => {
            viewData.trackIsSavedLoading = true;
            $update();
            let addRemoveFunc;

            if (viewData.trackIsSaved) {
                addRemoveFunc = spotify.removeFromMySavedTracks
            } else {
                addRemoveFunc = spotify.addToMySavedTracks
            }
            addRemoveFunc([track.id]) // note that we don't pass a user id
                .then(
                    function (data) {
                        viewData.trackIsSavedLoading = false;
                        viewData.trackIsSaved = !(viewData.trackIsSaved);
                        console.log(viewData)
                        $update();
                    },
                    function (err) {
                        console.log(err)
                        viewData.trackIsSavedLoading = false;
                        $update()
                    }

                );

        }

        const createPlayer = () => {
            player = new Audio(track.preview_url);
            console.log(track)
            player.addEventListener('loadstart', function () {
                previewLoading = true;
                $update();
            });
            player.addEventListener('canplaythrough', function () {
                previewLoading = false;
                player.play();
                $update();
            });
            player.addEventListener('ended', function () {
                playButton = "play_arrow";
                viewData.showProgressbar = false;
                $update();
            });
            player.addEventListener('timeupdate', function () {
                let trackProgress = player.currentTime / player.duration * 100
                $f7.progressbar.set('.progressbar', trackProgress);
                $update();
            });
        }

        const showAvaibleMarkets = () => {
            const emojis = track.available_markets.map(countryCodeEmoji);
            const text = track.available_markets;
            let fullText = '';

            let avaibleText = ''
            if (text.includes(region)) {
                avaibleText =
                    `<div class="block block-strong"><div class="block-inner"></div><p class="no-margin-top">This track is avaible in your region "${region}". ð</p></div>`;
            }

            for (let i = 0; i < text.length; i++) {
                fullText =
                    `${fullText}<div class="col"><div class="marketItem">${emojis[i]} ${text[i]}</div></div>`;
            }

            var dynamicSheet = $f7.sheet.create({
                content: `
          <div class="sheet-modal">
            <div class="toolbar">
              <div class="toolbar-inner">
                <div class="left"></div>
                <div class="right">
                  <a class="link sheet-close">Done</a>
                </div>
              </div>
            </div>
            <div class="sheet-modal-inner">
                ${avaibleText}
              <div class="block">
                <div class="row marketRow">
                    
          ${fullText}

        </div>
              </div>
            </div>
          </div>
        `
            });

            dynamicSheet.open();

        }

        const playTrack = () => {
            if (!player)
                createPlayer();

            if (!previewLoading) {
                if (player.paused) {
                    playButton = "pause";
                    viewData.showProgressbar = true;
                    $update();
                    player.play();
                } else {
                    playButton = "play_arrow";
                    viewData.showProgressbar = false;

                    $update();
                    player.pause();
                }
            }
        }

        $on('pageBeforeOut', (e, page) => {
            if (player)
                player.pause();
        });

        return $render;
    };
</script>