<template>
    <div class="page" data-name="home">
        <!-- Top Navbar -->
        <div class="navbar navbar-large">
            <div class="navbar-bg"></div>
            <div class="navbar-inner">
                <div class="left">
                    <a href="#" class="link icon-only panel-open" data-panel="left">
                        <i class="icon f7-icons if-not-md">menu</i>
                        <i class="icon material-icons if-md">menu</i>
                    </a>
                </div>
                <div class="title sliding">Statify</div>
                <div class="right">
                    <a href="#" class="link icon-only panel-open" data-panel="right">
                        <i class="icon f7-icons if-not-md">menu</i>
                        <i class="icon material-icons if-md">menu</i>
                    </a>
                </div>
                <div class="title-large">
                    <div class="title-large-text">Hello ${userInformations.display_name}</div>
                </div>
            </div>
        </div>

        <!-- Scrollable page content-->
        <div class="page-content">
            <div class="block block-strong">
                <p>This is an example of tabs-layout application. The main point of such tabbed layout is that each tab
                    contains
                    independent view with its own routing and navigation.</p>
            </div>

            ${viewData.myTopTracks != undefined && viewData.myTopTracks.total > 0 && $h`
            <div class="block-title">Your top Tracks</div>
            <div class="block block-strong no-padding-horizontal">
                <div data-space-between="15" data-slides-per-view="auto" data-free-mode="true" data-looped-slides="true" data-mousewheel="true"
                    class="swiper-container swiper-init topTracks">
                    <div class="swiper-wrapper">
                        ${viewData.myTopTracks != undefined && viewData.myTopTracks.total > 0 && $h`
                        ${viewData.myTopTracks.items.map((item) => $h`
                        <div class="swiper-slide">
                            <a href="/track/${item.id}/">
                                ${item.album.images.length > 1 ? $h`
                                <img class="elevation-3" src="${item.album.images[1].url}" />
                                ` : $h`
                                <img class="elevation-3" src="./assets/icons/audiotrack_black_48dp.svg" width="100" />
                                `}
                                <div class="title">${item.name}</div>
                                <div class="artist">${item.artists.map((item) => $h`${item.name} `)}</div>
                            </a>
                        </div>
                        `)}
                        `}
                    </div>
                </div>
            </div>
            `}

            ${viewData.myTopArtists != undefined && viewData.myTopArtists.total > 0 && $h`
            <div class="block-title">Your top Artists</div>
            <div class="block block-strong no-padding-horizontal">

                <div data-space-between="15" data-slides-per-view="auto" data-free-mode="true" data-mousewheel="true"
                    class="swiper-container swiper-init">
                    <div class="swiper-wrapper">
                        ${viewData.myTopArtists != undefined && viewData.myTopArtists.total > 0 && $h`
                        ${viewData.myTopArtists.items.map((item) => $h`

                        <div class="swiper-slide">
                            <a href="/artist/${item.id}/">
                                ${item.images.length > 1 ? $h`
                                <img class="elevation-3 round" src="${item.images[1].url}" />
                                ` : $h`
                                <img class="elevation-3" src="./assets/icons/audiotrack_black_48dp.svg" width="100" />
                                `}
                                <div class="title text-align-center">${item.name}</div>
                                <div class="artist text-align-center">${item.followers.total.toLocaleString()} Followers
                                </div>
                            </a>
                        </div>
                        `)}
                        `}
                    </div>
                </div>
            </div>
            `}


            ${viewData.myRecentTracks != undefined && viewData.myRecentTracks.items.length > 0 && $h`
            <div class="block-title">Your recent Tracks</div>
            <div class="block block-strong no-padding-horizontal">

                <div data-space-between="15" data-slides-per-view="auto" data-free-mode="true" data-mousewheel="true"
                    class="swiper-container swiper-init">
                    <div class="swiper-wrapper">
                        ${viewData.myRecentTracks != undefined && viewData.myRecentTracks.items.length > 0 && $h`
                        ${viewData.myRecentTracks.items.map((item) => $h`
                        <div class="swiper-slide">
                            <a href="/track/${item.track.id}/">
                                ${item.track.album.images.length > 1 ? $h`
                                <img class="elevation-3" src="${item.track.album.images[1].url}" />
                                ` : $h`
                                <img class="elevation-3" src="./assets/icons/audiotrack_black_48dp.svg" width="100" />
                                `}
                                <div class="title">${item.track.name}</div>
                                <div class="artist">${item.track.artists.map((item) => $h`${item.name} `)}</div>
                            </a>
                        </div>
                        `)}
                        `}
                    </div>
                </div>
            </div>
            `}







        </div>
    </div>
</template>
<style scoped>
    .swiper-container>div>div.swiper-slide {
        width: 150px;
    }

    .swiper-container>div>div.swiper-slide:first-child {
        margin-left: 15px;
    }

    .swiper-container>div>div.swiper-slide:last-child {
        margin-right: 15px;
    }

    .swiper-container>div>div.swiper-slide>a>img {
        width: 150px;
        height: 150px;
        border-radius: 5%;
        object-fit: cover;

    }

    .swiper-container>div>div.swiper-slide>a {
        width: 150px;
        text-overflow: ellipsis;
        overflow-y: hidden;
    }

    .swiper-container>div>div.swiper-slide>a>div.title {
        color: var(--f7-block-title-large-text-color);
        font-weight: 500;
    }

    .swiper-container>div>div.swiper-slide>a>div.artist {
        color: var(--f7-block-title-large-text-color);
        opacity: 0.5;
    }

    .round {
        border-radius: 50% !important;
    }
</style>
<script>
    export default (props, {
        $on,
        $f7,
        $update,
        $store
    }) => {
        let userInformations = {};
        let skeletonClass = "skeleton-text skeleton-effect-wave";
        const spotify = $store.getters.spotifyApi.value;
        let viewData = {};


        spotify
            .getMe() // note that we don't pass a user id
            .then(
                function (data) {
                    userInformations = data;
                    skeletonClass = '';
                    $store.dispatch("setUserId", data.id);
                    $update();
                },
                function (err) {
                    console.error(err);
                    $f7.dialog.alert(
                        'An error occurred when loading the data, your saved token will be deleted and you will have to log in again after reloading the app.',
                        'Sorry ðŸ˜”',
                        function () {
                            localStorage.removeItem('tokenMap')
                            window.location.href = window.location.origin + window.location.pathname;
                        });
                }
            );

        spotify
            .getMyTopArtists() // note that we don't pass a user id
            .then(
                function (data) {
                    if (viewData.myTopArtists == undefined) {
                        viewData.myTopArtists = data;
                        console.log('myTopArtists', data)
                        $update();
                    }
                },
                function (err) {
                    console.error(err);
                    $f7.dialog.alert(
                        'An error occurred when loading the data, your saved token will be deleted and you will have to log in again after reloading the app.',
                        'Sorry ðŸ˜”',
                        function () {
                            localStorage.removeItem('tokenMap')
                            window.location.href = window.location.origin + window.location.pathname;
                        });
                }
            );
        spotify
            .getMyTopTracks() // note that we don't pass a user id
            .then(
                function (data) {
                    if (viewData.myTopTracks == undefined) {

                        viewData.myTopTracks = data;
                        console.log('myTopTracks', data)

                        $update();
                    }
                },
                function (err) {
                    console.error(err);
                    $f7.dialog.alert(
                        'An error occurred when loading the data, your saved token will be deleted and you will have to log in again after reloading the app.',
                        'Sorry ðŸ˜”',
                        function () {
                            localStorage.removeItem('tokenMap')
                            window.location.href = window.location.origin + window.location.pathname;
                        });
                }
            );

        spotify
            .getMyRecentlyPlayedTracks() // note that we don't pass a user id
            .then(
                function (data) {
                    if (viewData.myRecentTracks == undefined) {

                        viewData.myRecentTracks = data;
                        console.log('myTopTracks', data)

                        $update();
                    }
                },
                function (err) {
                    console.error(err);
                    $f7.dialog.alert(
                        'An error occurred when loading the data, your saved token will be deleted and you will have to log in again after reloading the app.',
                        'Sorry ðŸ˜”',
                        function () {
                            localStorage.removeItem('tokenMap')
                            window.location.href = window.location.origin + window.location.pathname;
                        });
                }
            );




        return $render;
    }
</script>