<template>
    <div class="page">
        <div class="navbar">
            <div class="navbar-bg"></div>
            <div class="navbar-inner sliding">
                <div class="left">
                    <a href="#" class="link back">
                        <i class="icon icon-back"></i>
                        <span class="if-not-md">Back</span>
                    </a>
                </div>
                <div class="title">${album.name}</div>
                <div class="right">
                    <a href="#" class="link icon-only" @click="${showAvaibleMarkets}">
                        <i class="icon material-icons">language</i>
                    </a>
                    <a href="#" class="link icon-only" @click="${share}">
                        <i class="icon material-icons">share</i>
                    </a>
                </div>
            </div>
        </div>
        <div class="page-content">
            ${album.images.length > 1 ? $h`
            <div class="previewImageBlock">
                <img src="${album.images[1].url}" width="200px" class="imageBlur"/>
                <img src="${album.images[1].url}" width="200px" class="imageNoBlur"/>
            </div>
            ` : $h`
            `}
            <div class="contentBlock">
                ${viewData.showProgressbar && $h`
                <span class="progressbar" id="trackprogressbar"></span>
                `}


                <div class="block block-strong no-margin-top optionsBlock">
                    <div style="margin-left: auto; display: flex;">
                        <a class=" button button-large button-round optionsButtons" @click="${addToPlaylist}">
                            <span class="material-icons-round optionButtonIcon">
                                playlist_add
                            </span>
                        </a>
                        <button
                                class=" button button-large button-round optionsButtons button-preloader ${viewData.albumIsSavedLoading ? 'button-loading' : ''}"
                                @click=${addRemoveAlbum}>
                            <span class="preloader"></span>
                            <span></span>
                            <span class="material-icons-round optionButtonIcon">
                                ${viewData.albumIsSaved ? 'favorite' : 'favorite_border'}
                            </span>
                        </button>
                    </div>
                </div>
                <!-- Beginn Pagecontent -->

                ${album.tracks != undefined ? $h`
                <div class="block-title">Songs</div>
                <div class="list media-list">
                    <ul>
                        ${album.tracks.items.map((item) => $h`
                        <li class="swipeout">
                            <div class="swipeout-content">
                                <a href="/track/${item.id}/" class="item-link item-content">
                                    <div class="item-media">
                                        ${album.images.length > 0 ? $h`
                                        <img src="${album.images[album.images.length -1].url}" class="track-cover"/>
                                        ` : $h`
                                        <img src="./assets/icons/audiotrack_black_48dp.svg" width="45"/>
                                        `}
                                    </div>
                                    <div class="item-inner">
                                        <div class="item-title-row">
                                            <div class="item-title">${item.name}</div>
                                            <div class="item-after">

                                                ${item.isSaved ? $h`<span class="material-icons-round trackHeart">favorite</span>` : $h ``}
                                            </div>
                                        </div>
                                        <div class="item-subtitle">${item.artists.map((item) => $h`${item.name} `)}
                                        </div>
                                    </div>
                                </a>
                            </div>
                            <div class="swipeout-actions-left">
                                <a href="#" class="swipeout-overswipe" @click="${() => addRemoveTrack(item)}">
                                    <span class="material-icons-round optionButtonIcon">
                                ${item.isSaved ? 'favorite' : 'favorite_border'}
                            </span></a>
                            </div>
                            <div class="swipeout-actions-right">
                                <a href="#" class="swipeout-overswipe" @click="${() => addToPlaylistTrack(item)}"><span
                                        class="material-icons-round optionButtonIcon">
                                playlist_add
                            </span></a>

                            </div>
                        </li>
                        `)}
                    </ul>
                </div>
                ` : $h ``}


                <div class="block-title">Infos</div>
                <div class="list">
                    <ul>
                        <li>
                            <div class="item-content">
                                <div class="item-media"><i class="material-icons-round">
                                    av_timer
                                </i></div>
                                <div class="item-inner">
                                    <div class="item-title">Duration time</div>
                                    <div class="item-after">${viewData.duration}</div>
                                </div>
                            </div>
                        </li>
                        <li>
                            <a href="${album.external_urls.spotify}" class="item-link item-content external">
                                <div class="item-media">
                                    <i class="icon material-icons-round">launch
                                    </i>
                                </div>
                                <div class="item-inner">
                                    <div class="item-title-row">
                                        <div class="item-title">Open in Spotify</div>
                                    </div>
                                </div>
                            </a>
                        </li>
                    </ul>
                </div>
                <!-- End of Pagecontent -->
            </div>
        </div>
    </div>
</template>
<style scoped>
    .trackHeart {
        font-size: 15px;
        margin-right: -5px;
    }

    .optionsBlock {
        display: flex;
    }

    .optionsButtons {
        width: fit-content !important;
    }

    .optionButtonIcon {
        margin-left: 0 !important;
        margin-right: 4px;
    }

    .marketItem {
        width: min-content;
    }

    .marketRow > div {
        width: fit-content !important;
        margin: 5px !important;
    }

    .sheet-modal-inner {
        overflow-y: scroll !important;
    }

    .previewImageBlock {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 0;
    }

    .track-cover {
        background-image: url('./assets/icons/audiotrack_black_48dp.svg');
        width: 45px;
        height: 45px;
        object-fit: cover;
    }

    .previewImageBlock > img {
        display: block;
        object-fit: cover;
        object-position: center;
    }

    .contentBlock {
        background: var(--f7-page-bg-color);
        position: relative;
        z-index: 1;
        margin-top: 0;
        height: fit-content;
    }

    .imageBlur {
        -webkit-filter: blur(20px);
        -moz-filter: blur(20px);
        -o-filter: blur(20px);
        -ms-filter: blur(20px);
        filter: blur(20px);
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        padding: 30px;
    }

    .imageNoBlur {
        padding: 30px;
        position: inherit;
        margin-left: auto;
        margin-right: auto;
    }
</style>
<script>
    import {countryCodeEmoji} from 'country-code-emoji';

    export default (props, {$, $f7, $update, $on, $store, $f7router}) => {
        const spotify = $store.getters.spotifyApi.value;
        let previewLoading = false;
        var regExRegion = /^(?:(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))$|^((?:[a-z]{2,3}(?:(?:-[a-z]{3}){1,3})?)|[a-z]{4}|[a-z]{5,8})(?:-([a-z]{4}))?(?:-([a-z]{2}|\d{3}))?((?:-(?:[\da-z]{5,8}|\d[\da-z]{3}))*)?((?:-[\da-wy-z](?:-[\da-z]{2,8})+)*)?(-x(?:-[\da-z]{1,8})+)?$|^(x(?:-[\da-z]{1,8})+)$/i;
        let region = regExRegion.exec(navigator.language)[5];
        console.log(region)
        let album = props.album;
        console.log(album)
        let player;
        let playButton = "play_arrow";
        let viewData = {
            albumIsSavedLoading: true,
            trackIsSavedLoading: true
        };

        const addToPlaylistTrack = (item) => {
            $f7router.navigate('/add/playlist/', {
                props: {
                    items: [item]
                }
            })
        }
        const share = () => {
            const shareData = {
                title: `Statify - ${album.name}`,
                text: 'Look at this album i found!',
                url: window.location.href
            }

            try {
                navigator.share(shareData)
            } catch (err) {
                console.log('share error', err);
            }
        }
        const checkTracksSaved = () => {
            viewData.trackIsSavedLoading = true
            let trackIds = []
            for (let i = 0; i < album.tracks.items.length; i++) {
                let track = album.tracks.items[i];
                trackIds.push(track.id)
            }
            viewData.albumIsSavedLoading = true;
            spotify
                .containsMySavedAlbums([album.id]) // note that we don't pass a user id
                .then(
                    function (data) {
                        viewData.albumIsSavedLoading = false;
                        album.isSaved = data[0]
                        console.log(album)
                        $update();
                    }
                );
            spotify
                .containsMySavedTracks(trackIds) // note that we don't pass a user id
                .then(
                    function (data) {
                        viewData.trackIsSavedLoading = false;
                        for (let i = 0; i < album.tracks.items.length; i++) {
                            let track = album.tracks.items[i];
                            track.isSaved = data[i]
                        }
                        console.log(album.tracks)
                        $update();
                    }
                );


        }
        checkTracksSaved()

        $on('pageInit', (e, page) => {
            const msToTime = (duration) => {
                var milliseconds = parseInt((duration % 1000) / 100),
                    seconds = Math.floor((duration / 1000) % 60),
                    minutes = Math.floor((duration / (1000 * 60))),

                    minutes = (minutes < 10) ? "0" + minutes : minutes;
                seconds = (seconds < 10) ? "0" + seconds : seconds;

                return minutes + ":" + seconds;
            }

            let allDuration = 0;
            for (let i = 0; i < album.tracks.items.length; i++) {
                let element = album.tracks.items[i];
                let durationItem = element.duration_ms;

                allDuration = allDuration + durationItem;
            }
            viewData.duration = msToTime(allDuration);
            $update();
        });

        //Load if album is in User Library
        spotify
            .containsMySavedAlbums([album.id]) // note that we don't pass a user id
            .then(
                function (data) {
                    viewData.albumIsSavedLoading = false;
                    viewData.albumIsSaved = data[0];
                    $update();
                }
            );

        const addToPlaylist = () => {
            $f7router.navigate('/add/playlist/', {
                props: {
                    items: album.tracks.items
                }
            })
        }

        const addRemoveAlbum = () => {
            viewData.albumIsSavedLoading = true;
            $update();
            let addRemoveFunc;

            if (viewData.trackIsSaved) {
                addRemoveFunc = spotify.removeFromMySavedAlbums
            } else {
                addRemoveFunc = spotify.addToMySavedAlbums
            }
            addRemoveFunc([album.id]) // note that we don't pass a user id
                .then(
                    function (data) {
                        viewData.albumIsSavedLoading = false;
                        viewData.albumIsSaved = !(viewData.albumIsSaved);
                        $update();
                    },
                    function (err) {
                        console.log(err)
                        viewData.trackIsSavedLoading = false;
                        $update()
                    }

                );

        }
        const addRemoveTrack = (item) => {
            viewData.trackIsSavedLoading = true;
            $update();
            let addRemoveFunc;

            if (viewData.albumIsSaved) {
                addRemoveFunc = spotify.removeFromMySavedTracks
            } else {
                addRemoveFunc = spotify.addToMySavedTracks
            }
            addRemoveFunc([item.id]) // note that we don't pass a user id
                .then(
                    function (data) {
                        viewData.albumIsSavedLoading = false;
                        checkTracksSaved()
                        $update();
                    },
                    function (err) {
                        console.log(err)
                        viewData.albumIsSavedLoading = false;
                        checkTracksSaved()
                        $update()
                    }
                );
        }

        const createPlayer = () => {
            player = new Audio(track.preview_url);
            player.addEventListener('loadstart', function () {
                previewLoading = true;
                $update();
            });
            player.addEventListener('canplaythrough', function () {
                previewLoading = false;
                player.play();
                $update();
            });
            player.addEventListener('ended', function () {
                playButton = "play_arrow";
                viewData.showProgressbar = false;
                $update();
            });
            player.addEventListener('timeupdate', function () {
                let trackProgress = player.currentTime / player.duration * 100
                $f7.progressbar.set('.progressbar', trackProgress);
                $update();
            });
        }

        const showAvaibleMarkets = () => {
            const emojis = track.available_markets.map(countryCodeEmoji);
            const text = track.available_markets;
            let fullText = '';

            let avaibleText = ''
            if (text.includes(region)) {
                avaibleText = `<div class="block block-strong"><div class="block-inner"></div><p class="no-margin-top">This track is avaible in your region "${region}". 😁</p></div>`;
            }

            for (let i = 0; i < text.length; i++) {
                fullText = `${fullText}<div class="col"><div class="marketItem">${emojis[i]} ${text[i]}</div></div>`;
            }

            let dynamicSheet = $f7.sheet.create({
                content: `
          <div class="sheet-modal">
            <div class="toolbar">
              <div class="toolbar-inner">
                <div class="left"></div>
                <div class="right">
                  <a class="link sheet-close">Done</a>
                </div>
              </div>
            </div>
            <div class="sheet-modal-inner">
                ${avaibleText}
              <div class="block">
                <div class="row marketRow">
                    
          ${fullText}

        </div>
              </div>
            </div>
          </div>
        `
            });

            dynamicSheet.open();

        }

        const playTrack = () => {
            if (!player)
                createPlayer();

            if (!previewLoading) {
                if (player.paused) {
                    playButton = "pause";
                    viewData.showProgressbar = true;
                    $update();
                    player.play();
                } else {
                    playButton = "play_arrow";
                    viewData.showProgressbar = false;

                    $update();
                    player.pause();
                }
            }
        }

        $on('pageBeforeOut', (e, page) => {
            if (player)
                player.pause();
        });

        return $render;
    };
</script>